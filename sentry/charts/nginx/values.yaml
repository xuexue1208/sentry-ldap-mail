affinity: {}
autoscaling:
  enabled: false
cloneStaticSiteFromGit:
  enabled: false
  extraEnvVars: []
  extraVolumeMounts: []
  gitClone:
    args: null
    command: []
  gitSync:
    args: []
    command: []
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: bitnami/git
    tag: 2.32.0-debian-10-r20
  interval: 60
clusterDomain: cluster.local
commonAnnotations: {}
commonLabels: {}
containerPorts:
  http: 8080
containerSecurityContext:
  enabled: false
  runAsNonRoot: true
  runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
extraDeploy: []
extraEnvVars: []
extraVolumeMounts: []
extraVolumes: []
healthIngress:
  annotations: {}
  certManager: false
  enabled: false
  extraHosts: []
  extraTls: []
  hostname: example.local
  pathType: ImplementationSpecific
  secrets: []
  tls: false
hostAliases: []
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/nginx
  tag: 1.21.0-debian-10-r21
ingress:
  annotations: {}
  apiVersion: null
  certManager: false
  enabled: false
  hostname: nginx.local
  path: /
  pathType: ImplementationSpecific
  secrets: []
  tls: false
initContainers: null
kubeVersion: null
ldapDaemon:
  customLivenessProbe: {}
  customReadinessProbe: {}
  enabled: false
  existingNginxServerBlockSecret: null
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: bitnami/nginx-ldap-auth-daemon
    tag: 0.20200116.0-debian-10-r382
  ldapConfig:
    baseDN: ""
    bindDN: ""
    bindPassword: ""
    filter: ""
    httpCookieName: ""
    httpRealm: ""
    uri: ""
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nginxServerBlock: |-
    server {
    listen 0.0.0.0:{{ .Values.containerPorts.http }};

    # You can provide a special subPath or the root
    location = / {
        auth_request /auth-proxy;
    }

    location = /auth-proxy {
        internal;

        proxy_pass http://127.0.0.1:{{ .Values.ldapDaemon.port }};

        ###############################################################
        # YOU SHOULD CHANGE THE FOLLOWING TO YOUR LDAP CONFIGURATION  #
        ###############################################################

        # URL and port for connecting to the LDAP server
        # proxy_set_header X-Ldap-URL "ldap://YOUR_LDAP_SERVER_IP:YOUR_LDAP_SERVER_PORT";

        # Base DN
        # proxy_set_header X-Ldap-BaseDN "dc=example,dc=org";

        # Bind DN
        # proxy_set_header X-Ldap-BindDN "cn=admin,dc=example,dc=org";

        # Bind password
        # proxy_set_header X-Ldap-BindPass "adminpassword";
    }
    }
  port: 8888
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
metrics:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: bitnami/nginx-exporter
    tag: 0.9.0-debian-10-r87
  podAnnotations: {}
  port: null
  resources:
    limits: {}
    requests: {}
  securityContext:
    enabled: false
    runAsUser: 1001
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.port }}'
      prometheus.io/scrape: "true"
    port: 9113
  serviceMonitor:
    enabled: false
nodeAffinityPreset:
  key: ""
  type: ""
  values: []
nodeSelector: {}
pdb:
  create: false
  minAvailable: 1
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
  enabled: false
  fsGroup: 1001
  sysctls: []
priorityClassName: ""
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 5
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 3
replicaCount: 1
resources:
  limits: {}
  requests: {}
service:
  annotations: {}
  externalTrafficPolicy: Cluster
  httpsPort: 443
  nodePorts:
    http: ""
    https: ""
  port: 80
  targetPort:
    http: http
    https: https
  type: LoadBalancer
serviceAccount:
  annotations: {}
  create: false
sidecars: null
tolerations: {}
