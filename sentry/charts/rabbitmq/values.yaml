advancedConfiguration: ""
affinity: {}
auth:
  tls:
    caCertificate: ""
    enabled: false
    existingSecretFullChain: false
    failIfNoPeerCert: true
    serverCertificate: ""
    serverKey: ""
    sslOptionsVerify: verify_peer
  username: user
clusterDomain: cluster.local
clustering:
  addressType: hostname
  forceBoot: false
  rebalance: false
configuration: |-
  ## Username and password
  ##
  default_user = {{ .Values.auth.username }}
  default_pass = CHANGEME
  ## Clustering
  ##
  cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
  cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
  cluster_formation.node_cleanup.interval = 10
  cluster_formation.node_cleanup.only_log_warning = true
  cluster_partition_handling = autoheal
  # queue master locator
  queue_master_locator = min-masters
  # enable guest user
  loopback_users.guest = false
  {{ tpl .Values.extraConfiguration . }}
  {{- if .Values.auth.tls.enabled }}
  ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
  listeners.ssl.default = {{ .Values.service.tlsPort }}
  ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
  ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
  ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
  ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
  {{- end }}
  {{- if .Values.ldap.enabled }}
  auth_backends.1 = rabbit_auth_backend_ldap
  auth_backends.2 = internal
  {{- range $index, $server := .Values.ldap.servers }}
  auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
  {{- end }}
  auth_ldap.port = {{ .Values.ldap.port }}
  auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
  {{- if .Values.ldap.tls.enabled }}
  auth_ldap.use_ssl = true
  {{- end }}
  {{- end }}
  {{- if .Values.metrics.enabled }}
  ## Prometheus metrics
  ##
  prometheus.tcp.port = 9419
  {{- end }}
  {{- if .Values.memoryHighWatermark.enabled }}
  ## Memory Threshold
  ##
  total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
  vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
  {{- end }}
containerSecurityContext: {}
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
extraConfiguration: |-
  #default_vhost = {{ .Release.Namespace }}-vhost
  #disk_free_limit.absolute = 50MB
  #load_definitions = /app/load_definition.json
extraContainerPorts: []
extraEnvVars: []
extraPlugins: rabbitmq_auth_backend_ldap
extraSecrets: {}
extraSecretsPrependReleaseName: false
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
image:
  debug: false
  pullPolicy: IfNotPresent
  registry: docker.io
  repository: bitnami/rabbitmq
  tag: 3.8.11-debian-10-r0
ingress:
  annotations: {}
  certManager: false
  enabled: false
  hostname: rabbitmq.local
  path: /
  pathType: ImplementationSpecific
  secrets: []
  tls: false
initContainers: {}
kubeVersion: null
ldap:
  enabled: false
  port: "389"
  servers: []
  tls:
    enabled: false
  user_dn_pattern: cn=${username},dc=example,dc=org
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 120
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 20
loadDefinition:
  enabled: false
logs: '-'
memoryHighWatermark:
  enabled: false
  type: relative
  value: 0.4
metrics:
  enabled: false
  plugins: rabbitmq_prometheus
  podAnnotations:
    prometheus.io/port: '{{ .Values.service.metricsPort }}'
    prometheus.io/scrape: "true"
  prometheusRule:
    additionalLabels: {}
    enabled: false
    namespace: ""
    rules: []
  serviceMonitor:
    additionalLabels: {}
    enabled: false
    honorLabels: false
    interval: 30s
networkPolicy:
  allowExternal: true
  enabled: false
nodeAffinityPreset:
  key: ""
  type: ""
  values: []
nodeSelector: {}
pdb:
  create: false
  minAvailable: 1
persistence:
  accessMode: ReadWriteOnce
  enabled: true
  selector: {}
  size: 8Gi
  volumes: null
plugins: rabbitmq_management rabbitmq_peer_discovery_k8s
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podManagementPolicy: OrderedReady
podSecurityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
priorityClassName: ""
rbac:
  create: true
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 20
replicaCount: 1
resources:
  limits: {}
  requests: {}
service:
  annotations: {}
  distPort: 25672
  distPortName: dist
  epmdPortName: epmd
  externalTrafficPolicy: Cluster
  extraPorts: []
  labels: {}
  managerPort: 15672
  managerPortName: http-stats
  metricsPort: 9419
  metricsPortName: metrics
  port: 5672
  portName: amqp
  tlsPort: 5671
  tlsPortName: amqp-ssl
  type: ClusterIP
serviceAccount:
  create: true
sidecars: {}
statefulsetLabels: {}
terminationGracePeriodSeconds: 120
tolerations: []
ulimitNofiles: "65536"
updateStrategyType: RollingUpdate
volumePermissions:
  enabled: false
  image:
    pullPolicy: Always
    pullSecrets: []
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
  resources:
    limits: {}
    requests: {}
